- name: "disable swap"
  become: yes
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  become: yes
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

# - name: "remove swapfile from /etc/fstab"
#   become: yes
#   mount:
#     name: swap
#     fstype: swap
#     state: absent

- name: "update the firewall"
  when: '"master" in k8s_role_to_deploy'
  become: yes
  iptables:
    jump: ACCEPT
    protocol: tcp
    chain: INPUT
    destination_port: "6443"
    ctstate: NEW
    comment: allow kube-api traffic

- name: "add signing keys"
  become: yes
  apt_key:
    url: "{{ item}}"
    state: present
  with_items:
    - https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key

- name: "add repositories"
  become: yes
  apt_repository:
    repo: "{{ item.repo }}"
    state: present
    filename: "{{ item.filename }}"
  with_items:
    - repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      filename: kubernetes.list
    - repo: deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /
      filename: devel:kubic:libcontainers:stable.list

- name: "run modprobes"
  become: yes
  command: "modprobe {{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: "update systctl"
  become: yes
  sysctl:
    name: "{{ item }}"
    reload: yes
    state: present
    sysctl_set: yes
    sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    value: "1"
  with_items:
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-ip6tables

- name: "install crio"
  become: yes
  apt:
    deb: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version.crioPath }}"

- name: "check for crictl"
  stat:
    path: /usr/local/bin/crictl
  register: exist_crictl

- name: "install crictl"
  become: yes
  when: not exist_crictl.stat.exists
  unarchive:
    src: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ version.crictl }}/crictl-{{ version.crictl }}-linux-amd64.tar.gz"
    dest: /usr/local/bin
    remote_src: yes

- name: "force systemd to reread configs"
  become: yes
  systemd:
    daemon_reload: yes

- name: "start crio"
  become: yes
  service:
    name: crio
    state: started
    enabled: yes

- name: "install k8s"
  become: yes
  apt:
    state: present
    update_cache: yes
    pkg:
      - "kubelet={{ version.kubernetes }}-00"
      - "kubeadm={{ version.kubeadm }}-00"
      - "kubectl={{ version.kubectl }}-00"
      - kubernetes-cni
      - ipvsadm

# - name: "touching a configfile"
#   become: yes
#   file:
#     path: /etc/default/kubelet
#     state: touch

# - name: "writing configfile"
#   become: yes
#   template:
#     dest: /etc/default/kubelet
#     src: kubelet.j2

# - name: "force systemd to reread configs"
#   become: yes
#   systemd:
#     daemon_reload: yes

- name: "get token"
  become: yes
  command: bash -c "kubeadm token generate 2>/dev/null"
  register: k8s_token

- name: "get ip"
  become: yes
  shell: |
    DEFAULT_ROUTE_DEV=$(route -n | awk '/^0.0.0.0/ { print $5 " " $NF }' | sort | awk '{ print $NF; exit }')
    DEFUALT_ROUTE_DEV_IP=$(ip a s $DEFAULT_ROUTE_DEV | grep 'inet ' | awk '{print $2}' | awk -F "/" '{print $1}' | head -n 1)
    echo $DEFUALT_ROUTE_DEV_IP
  register: default_ip

- name: "create k8s configuration"
  become: yes
  template:
    dest: /etc/kubeadm.yaml
    src: kubeadm-config.yaml.j2

- name: "list and pull images"
  become: yes
  command: bash -c "kubeadm config images {{ item }} --config /etc/kubeadm.yaml"
  with_items:
    - list
    - pull

- name: "initialize k8s cluster with predefined config"
  when: '"master" in k8s_role_to_deploy'
  become: yes
  command: bash -c "kubeadm init --config /etc/kubeadm.yaml"

- name: "cycle kubelet"
  become: yes
  service:
    name: kubelet
    state: started
    enabled: yes

- name: "mkdir home directory"
  when: '"master" in k8s_role_to_deploy'
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory

- name: "copy kubeconfig"
  when: '"master" in k8s_role_to_deploy'
  become: yes
  copy:
    dest: "{{ ansible_env.HOME }}/.kube/config"
    src: "/etc/kubernetes/admin.conf"
    force: yes
    remote_src: yes
    mode: u+rw,g+rw,o+rw

- name: "join command"
  when: '"node" in k8s_role_to_deploy'
  become: yes
  command: "{{ kubeadm_join_cmd }} --v=9 --node-name {{ ansible_hostname }}"
  ignore_errors: true

- name: "allow jobs to be scheduleable on master"
  become: no
  command: |
    kubectl taint nodes --all node-role.kubernetes.io/master:NoSchedule-
